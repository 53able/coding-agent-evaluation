---
description: 
globs: 
alwaysApply: false
---
# オブジェクト指向UIデザインの原則

オブジェクト指向 UI のベストプラクティスを踏まえたデザインガイドラインを策定します。
オブジェクト指向 UI の設計における重要な原則と手法のデザインガイドラインは以下の通りです。

## オブジェクト指向 UI デザインガイドライン

### オブジェクトの抽出と明確化:
- アプリケーションが扱う主要な情報オブジェクト（エンティティ）を早い段階でユーザーに提示します.
- これらのオブジェクトは、ユーザーのドメインにおける主要な概念物であり、アプリケーションの用途や作業範囲を把握する手掛かりとなります.
- オブジェクトには「もの」的なものだけでなく、「こと」的なものも含まれます.
- ユーザーが意識している、または意識すべき概念のみをオブジェクトとして定義します。プログラム内部のロジックのためだけのオブジェクトはUIには含めません.
- オブジェクトを抽出するためには、ユーザーがそのドメインで何を行っているのか、業務の内容を深く理解する必要があります。ユーザー調査やタスク分析を十分に行います.

### 直接的な操作と知覚可能性:
- オブジェクトは画面上でアイコン、ウィンドウ、テキスト、グラフィック、入力欄、選択肢、メニュー、ボタンといった具体的な形で知覚できるように表示します.
- ユーザーはマウスや指などでこれらのオブジェクトを直接的に指し示し、操作できます.
- オブジェクト指向 UI は、現実世界での作業と同様に、対象物が見えていて触ることができ、作業の結果が対象物の変化としてその場で確認できる操作モデルを目指します.

### 「オブジェクト選択 → アクション選択」の操作順序:
- アプリケーション全体を通して、**「オブジェクトを選択」してから「そのオブジェクトに対するアクションを選択」**するという基本的な操作順序をできる限り踏襲します. これは「名詞 → 動詞」の順序です.
- この操作順序により、インタラクションがモードレスになり、「対象選択待ち」のモードを排除できます.
- タスク指向 UI のような「動詞 → 名詞」の順序は、不自然でモードを生じさせ、操作の自由度を奪う可能性があります.

### モードレスなインタラクション:
- UI はできる限りモードを持たず、キーストロークやボタンのプッシュの後に即座にフィードバックがあるようにします.
- モードレスな UI では、ある操作の意味が一定であり、ユーザーは自由な順序で作業を行うことができ、いつでも考えを変えて別の作業を始められます.
- モードレスな UI は、「1 ストローク即時実行」を目指します.

### オブジェクトの性質と状態の体現:
- オブジェクトは自身の性質と状態を視覚的に表現します. 例えば、リスト、画像、文字、アイコンなどが情報を操作対象として対象化したオブジェクトです.

### オブジェクトに基づいたナビゲーション:
- ナビゲーションは、現在見ているオブジェクトに関連する、または付随する別のオブジェクトの一覧を呼び出すものとして考えます.
- ナビゲーション項目は名詞形で表現し、オブジェクト指向の操作構文に沿ったものにします.

### タスクとオブジェクトの関係:
- タスクはオブジェクトとアクションの組み合わせとして捉えます.
- オブジェクト指向 UI では、タスクを実行するためのアクションは、操作対象となるオブジェクトに紐付けられます.
- アプリケーションのルートナビゲーションからタスク名という形骸を取り去り、ユーザーが作業の本質に向き合えるようにします.

### ビューの設計:
- オブジェクトはアプリケーション内の複数のビューに表象されます.
- 基本的なビュー形式として、複数のオブジェクトを集合として表現するコレクションビューと、単数のオブジェクトを表現するシングルビューがあります.
- ビューの中に別のビューを含む場合もあります. 例えば、シングルビューの中に別のオブジェクトのコレクションビューを含めるレイアウトなどです.

### レイアウトパターンの適用:
- オブジェクト指向 UI に適したレイアウトパターンを適切に踏襲することで、ユーザーがアプリケーションの振る舞いを短時間で学習し、思い通りに使えるような UI ができあがります.
- ルートナビゲーションの配置、ビューの配置、コレクションビューの表示形式、コレクションのフィルタリング、シングルビューの表示形式、アクションの表示形式などを検討します.

### ユーザー中心の設計:
- UI は、ユーザーとその関心の対象（オブジェクト）を接続する空間です.
- ユーザーが持っている関心対象についての構造的概念（メンタルモデル）をコンピュータの中で模式的に再現することが重要です. オブジェクトモデリングは、ユーザーのメンタルモデルを適切に反映したものでなければなりません.

これらのガイドラインに従うことで、ユーザーはアプリケーションが扱う情報を明確に把握し、直感的かつ自由な操作を通じて目的を達成できます。
そうした結果、使いやすいオブジェクト指向 UI を設計できるでしょう。
