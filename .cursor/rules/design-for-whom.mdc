---
description: 
globs: 
alwaysApply: false
---
# WebアプリケーションUI/UXベストプラクティスのためのデザイン規約（『誰のためのデザイン？』に基づく）

ドナルド・ノーマン著『誰のためのデザイン？』の原則に基づき、使いやすいWebアプリケーションのUI/UXを実現するためのデザイン規約を以下に策定します。これらの規約は、ユーザーが直感的かつ効率的にアプリケーションを利用できるようにするための指針となります。

## 発見可能性 (Discoverability) の原則

- ユーザーが「どう操作すればよいかを発見できる」デザインを心がけます。
- 要素の見た目から、それが何をするもので、どう動き、どんな操作が可能かを推測できるように設計します。

## アフォーダンス (Affordance) の原則

- WebアプリのUI要素は、その機能が視覚的に暗示されるように設計します。
- 例えば、画面上のボタンは視覚的にボタンと分かるデザインにします。これにより、ユーザーは「押せば何か操作できる」と直感的に理解できます。
- クリックできる要素は、他のテキストと明確に区別します。伝統的に青色かつ下線付きのリンクテキストはその例です。これは「ここはクリックできる」というアフォーダンスの手がかりを与えます。
- ユーザーが要素を見ただけで「何ができるか」を想起できるデザインを追求します。

## シグニファイア (Signifier) の原則

- アフォーダンスが不明確な場合は、シグニファイアを用いて操作方法を明示します。
- 視覚的なデザイン（色や形、ラベル）がシグニファイアとして働き、ユーザーに「何をすべきか」を認識させるようにします。例えば、「Sign in」ボタンを色付きで描画することで、クリック可能であることを示します。

## マッピング (Mapping) の原則

- 操作のしかたやコントロールの配置と、それによって起こる結果との関係（マッピング）を、ユーザーの直感と一致させるように設計します。
- 操作とその結果（システムの反応）が論理的・空間的に対応付けられていることが重要です。
- 例えば、フォーム入力と送信ボタンの関係では、入力欄の直後に送信ボタンを配置すれば対応が明確になります。
- スライダーUIでは、つまみを左右に動かす方向と音量の増減が対応している必要があります。
- UI上の矢印アイコンは「←」が戻る、「→」が進むといった一般的な解釈とズレないマッピングを心がけます。
- 関連する要素を空間的・時間的に近づけて配置することで、操作と結果の対応を分かりやすくします。
- UI要素の配置や挙動をユーザーのメンタルモデルに合わせることで、直感的な操作性を実現します。

## フィードバック (Feedback) の原則

- ユーザーのあらゆる操作に対して、適切なフィードバックを即座に提供します。
- フィードバックがないとユーザーは自分の操作が正しく反映されたか判断できず、不安や混乱を招くため、デザイン上必須の要素です。
- 操作の結果を視覚的に明確に伝えます。ボタンが押されたら色が変わる、ローディング中はアニメーションを表示する、データが保存されたら成功メッセージを表示するなど、現在の状態や操作の結果をユーザーが常に把握できるようにします。

## 制約 (Constraints) の原則

- デザイン上の制限要素（制約）を活用することで、ユーザーを望ましい行動に導き、誤った操作を防ぎます。
- ユーザーができること・できないことの範囲を明確にします。
- Web UIにおいては、ユーザーの誤った操作や無効な入力を未然に防ぐことが重要です。
- 入力フォームでは入力内容に対して制約を設けます。
  - テキストフィールドに想定外の形式の文字が入力できないようバリデーションや入力フォーマットの制限を設けます（例：郵便番号欄で数字以外入力できないようにする）。
  - プルダウンメニューで選択肢を限定して入力ミスを防ぎます。
- 依存関係のある操作には順序の制約をつけます。
  - 必須項目が未入力のうちは送信ボタンを押せないよう**ボタンを非活性（グレーアウト）**にします。
  - 重要な設定を変更するときには確認ダイアログを出して「はい/いいえ」の明示的な選択をさせます。
- 文化的制約を考慮し、一般的な慣習に基づいたUI要素を使用します。
  - 例えばエラー状態のメッセージは赤色で表示し、成功時は緑色にするなど、多くのユーザーに共通理解のある表現を用います。ただし、色だけに頼らずアイコンやテキストでも冗長に示すように配慮します。

## エラーの防止とユーザーフレンドリーなエラー処理の原則

- エラーは可能な限り起こさせないデザインを目指します。
  - 制約の活用、フィードバックの工夫、入力内容の制限、デフォルト値とガイドの提供、操作手順のガイドなどが有効です。
- それでもエラーが発生した場合は、ユーザーがすぐに発見でき、簡単に訂正できるようにすることが重要です。
- エラーメッセージは明確かつ具体的に表示し、「何が問題か」をユーザー視点で伝えます（例：「入力エラーが発生しました」ではなく「メールアドレスの形式が正しくありません」）。
- エラーが起きた箇所を一目で分かるようにハイライトし、可能であればそのフィールドまでスクロールして焦点を当てます。
- 複数項目にエラーがある場合は、エラー一覧を表示し、各エラー項目へジャンプできるリンクを提供することも検討します。
- 入力内容は可能な限り保持しておき、ユーザーに一から再入力させることを避けます。
- 誤操作してしまった際に簡単に**取り消せる仕組み（Undo機能）**を提供します（例：送信取り消し、ゴミ箱からの復元）。
- エラーからの回復が難しい場合でも、「設定を初期状態に戻す」オプションや、サポートへの問い合わせ導線を用意するなど、ユーザーがエラー状態から抜け出すための手段を残しておきます。
- エラーは設計上想定内の出来事と捉え、ユーザーを責めずに支援する姿勢でUIを設計します。

これらのデザイン規約を遵守することで、ユーザーにとってより使いやすく、エラーの少ない、快適なWebアプリケーション体験を提供できるはずです。常にユーザーの視点に立ち、これらの原則を意識したデザインを心がけてください。
